#!/usr/bin/env python
# -*- coding:utf-8 -*-
import os

import keras as k
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer

"""
训练模型
"""
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"


def Model_Load_Data(CLEAN_DATA_PATH):
    AIYOUData = pd.read_csv(CLEAN_DATA_PATH, encoding="gbk")
    # 目标变量
    targetVar = "donate_psn_name"
    # 数据集特征
    features = list(AIYOUData.columns)
    features.remove(targetVar)
    # 目标变量的类别
    Class = AIYOUData[targetVar].unique()

    # 目标变量的类别字典
    Class_dic = dict(zip(Class, range(len(Class))))
    # 增加一列target用于编码
    AIYOUData['target'] = AIYOUData[targetVar].apply(lambda x: Class_dic[x])
    # 对目标变量进行0-1编码(One-hot Encoding)
    lb = LabelBinarizer()
    lb.fit(list(Class_dic.values()))
    transformed_labels = lb.transform(AIYOUData['target'])
    # 对多分类进行0-1编码的变量
    y_bin_labels = []
    for i in range(transformed_labels.shape[1]):
        y_bin_labels.append('y' + str(i))
        AIYOUData['y' + str(i)] = transformed_labels[:, i]
        # 将数据集分为训练集和测试集
    train_x, test_x, train_y, test_y = train_test_split(AIYOUData[features], AIYOUData[y_bin_labels],
                                                        train_size=0.6, test_size=0.4, random_state=1)
    return train_x, test_x, train_y, test_y, Class_dic


def Train_Model(Data_Path, outnum):
    np.random.seed(7)
    tf.set_random_seed(9)
    train_x, test_x, train_y, test_y, Class_dict = Model_Load_Data(Data_Path)
    simple_adam = k.optimizers.Adam(lr=0.000001)

    model = k.Sequential()

    model.add(k.layers.Dense(
        units=64,
        input_dim=8,
        kernel_initializer=k.initializers.glorot_uniform(seed=1),
        activation="tanh"
    ))

    model.add(k.layers.Dense(
        units=outnum,
        kernel_initializer=k.initializers.glorot_uniform(seed=1),
        activation="softmax"
    ))
    model.compile(
        loss="categorical_crossentropy",
        optimizer=simple_adam,
        metrics=["accuracy"]
    )

    model.fit(
        train_x,
        train_y,
        batch_size=8,
        epochs=10000,
        shuffle=True,
        verbose=1,
    )
    # 测试数据
    dataarr = [
        [5, 0, 4, 0, 0, 4806.99, 0, 0],
        [26, 0, 1, 1, 1, 20779.76, 20779.76, 1],
        [9, 0, 1, 2, 1, 40000, 40000, 0],
        [12, 0, 1, 3, 1, 16991.4, 16991.4, 1],
        [22, 0, 1, 4, 1, 12500, 12500, 0],
        [21, 0, 1, 5, 1, 9933.73, 9933.73, 0],
        [23, 0, 6, 6, 0, 2031.61, 0, 0],
        [14, 0, 1, 7, 1, 12525.94, 12525.94, 0],
        [2, 0, 1, 8, 1, 13816.67, 13816.67, 0],
        [25, 1, 10, 9, 0, 2076.57, 0, 0],
        [26, 0, 1, 10, 1, 23099, 23099, 0],
        [7, 0, 1, 11, 1, 26164.43, 26164.43, 0],
        [21, 0, 1, 5, 1, 9072.78, 9072.78, 0],
        [21, 0, 1, 5, 1, 11941.98, 11941.98, 1],
        [26, 0, 8, 6, 0, 441.92, 0, 0],
        [25, 0, 1, 12, 2, 17977.46, 17977.46, 0],
        [21, 0, 1, 5, 1, 13222.47, 13222.47, 0],
        [21, 0, 1, 5, 1, 16000, 16000, 0],
        [26, 0, 1, 13, 2, 24283.34, 24283.34, 0],
        [18, 0, 1, 14, 1, 15480.61, 15480.61, 0],
        [2, 1, 9, 15, 0, 4139.49, 0, 0],
        [15, 1, 7, 6, 0, 1929.48, 0, 0],
        [8, 0, 1, 16, 1, 21242.37, 21242.37, 0],
        [15, 1, 3, 6, 0, 11017.44, 0, 0],
        [11, 0, 1, 17, 1, 18755, 18755, 0],
        [18, 0, 1, 14, 1, 14651.1, 14651.1, 0],
        [18, 0, 1, 18, 1, 10449.26, 10449.26, 0],
        [21, 0, 1, 5, 1, 10434.66, 10434.66, 0],
        [0, 0, 1, 2, 1, 40000, 40000, 0],
        [14, 0, 1, 7, 1, 12071.96, 12071.96, 0],
        [18, 0, 1, 18, 1, 7441.51, 7441.51, 0],
        [25, 0, 1, 9, 1, 17000, 17000, 1],
        [2, 0, 1, 19, 1, 32984.58, 32984.58, 0],
        [26, 0, 1, 8, 1, 27000, 27000, 0],
        [21, 0, 1, 5, 1, 11537.43, 11537.43, 1],
        [7, 0, 1, 16, 1, 10000, 10000, 0],
        [15, 0, 1, 20, 0, 26003.87, 40000, 0],
        [0, 0, 4, 21, 0, 1187.88, 0, 0],
        [2, 0, 1, 4, 1, 7235.29, 7235.29, 0],
        [25, 0, 1, 22, 1, 15268.3, 15268.3, 0],
        [18, 0, 1, 3, 1, 22726.47, 22726.47, 0],
        [18, 0, 1, 18, 1, 6008.66, 6008.66, 0],
        [26, 0, 1, 1, 1, 10057.65, 10057.65, 0],
        [15, 1, 13, 6, 0, 6153.23, 0, 0],
        [11, 0, 1, 23, 1, 5000, 5000, 1],
        [18, 0, 1, 24, 1, 10850, 10850, 0],
        [18, 0, 1, 4, 1, 12500, 12500, 0],
        [21, 0, 1, 5, 1, 13500, 13500, 0],
        [26, 0, 1, 1, 1, 11258.74, 11258.74, 0],
        [7, 0, 1, 25, 1, 10232.13, 10232.13, 0],
        [25, 1, 21, 9, 0, 1107.59, 0, 0],
        [18, 0, 1, 24, 1, 4045.97, 4045.97, 0],
        [15, 1, 5, 20, 0, 4200.9, 0, 0],
        [7, 0, 1, 21, 2, 50000, 50000, 0],
        [21, 0, 1, 5, 1, 12626.19, 12626.19, 0],
        [2, 0, 1, 8, 1, 20000, 20000, 0],
        [18, 0, 1, 22, 1, 22302, 22302, 0],
        [2, 0, 2, 15, 0, 3248.11, 0, 0],
        [18, 0, 1, 18, 1, 6404.77, 6404.77, 0],
        [26, 1, 12, 6, 0, 1604.32, 0, 0],
        [7, 0, 1, 11, 1, 38980.5, 38980.5, 0],
        [18, 0, 1, 4, 1, 26040.56, 26040.56, 0],
        [25, 0, 1, 22, 1, 26337, 26337, 0],
        [11, 0, 1, 17, 1, 15000, 15000, 0],
        [21, 0, 1, 5, 1, 11832.81, 11832.81, 0],
        [9, 0, 1, 2, 1, 50000, 50000, 0],
        [21, 0, 1, 21, 1, 13000, 13000, 0],
        [2, 0, 1, 8, 1, 7815.09, 7815.09, 0],
        [18, 0, 1, 3, 1, 13000, 13000, 0],
        [8, 0, 1, 16, 1, 10970.23, 10970.23, 0],
        [18, 0, 1, 22, 1, 40000, 40000, 0],
        [18, 0, 1, 18, 1, 6957.84, 6957.84, 0],
        [10, 0, 1, 26, 1, 21824.72, 21824.72, 0],
        [26, 0, 1, 27, 1, 11611, 11611, 0],
        [23, 0, 1, 22, 1, 29301, 29301, 0],
        [26, 0, 5, 15, 0, 2021.88, 0, 0],
        [18, 0, 1, 24, 1, 7931.8, 7931.8, 0],
        [10, 0, 1, 26, 1, 9815.52, 9815.52, 0],
        [21, 0, 1, 5, 1, 10841.34, 10841.34, 0],
        [21, 0, 1, 28, 1, 19282.72, 19282.72, 0],
        [26, 1, 13, 6, 0, 722.31, 0, 0],
        [7, 0, 1, 11, 1, 20995.93, 20995.93, 0],
        [21, 0, 1, 5, 1, 17190.55, 17190.55, 0],
        [26, 0, 1, 1, 1, 9617.76, 9617.76, 1],
        [7, 0, 1, 25, 1, 20931.1, 20931.1, 0],
        [18, 0, 1, 22, 1, 18000, 18000, 0],
        [18, 0, 1, 14, 1, 15723.66, 15723.66, 0],
        [18, 0, 1, 22, 1, 13000, 13000, 0],
        [23, 0, 1, 6, 0, 996.31, 40000, 0],
        [18, 0, 1, 18, 1, 6078.28, 6078.28, 0],
        [25, 1, 3, 9, 0, 2518.65, 0, 0],
        [7, 0, 1, 25, 1, 21064.77, 21064.77, 0],
        [18, 0, 1, 14, 1, 17026.36, 17026.36, 0],
        [12, 0, 1, 3, 1, 25480.17, 25480.17, 1],
        [2, 0, 1, 8, 1, 20611.32, 20611.32, 0],
        [11, 0, 1, 29, 1, 40000, 40000, 0],
        [18, 0, 1, 4, 1, 16589, 16589, 0],
        [21, 0, 1, 5, 1, 9487.02, 9487.02, 0],
        [25, 0, 1, 9, 1, 40000, 40000, 0],
        [2, 0, 1, 30, 1, 38766.8, 38766.8, 0]]
    for i in dataarr:
        unknown = np.array([i], dtype=np.float32)
        predicted = model.predict(unknown)
        species_dict = {v: k for k, v in Class_dict.items()}
        print(species_dict[np.argmax(predicted)])


writeBig = r""
writeMid = r""
writeSma = r""

Train_Model(writeBig, 5)
